<?php
namespace Wise\Dispatcher;

use Wise\Conf\Conf;

/**
 * FrontController: Load route application, execute plugins and controller
 *
 * @author gdievart <dievartg@gmail.com>
 */
class Dispatcher extends \Wise\Component\Component
{
    /**
     * @var string Name Methods called on plugins
     */
    const PLUGIN_PRECALL = 'precall';
    const PLUGIN_POSTCALL = 'postcall';

    /**
     * @var string Unique id generated by route informations
     */
    protected static $routeId;

    /**
     * @var string Route name
     */
    protected static $routeName;

    /**
     * @var string Controller class name
     */
    protected $controller;

    /**
     * @var string Method call on controller
     */
    protected $method;

    /**
     * @var array Args to pass to controller
     */
    protected $argv = array();

    /**
     * @var array Plugins called
     */
    protected $plugins = array();

    /**
     * @var array Ref to plugins already loaded
     */
    protected $pluginsLoaded = array();

    /**
     * @var boolean Flag to interrupt the request
     */
    protected static $interruptRequest = false;

    /**
     * @var string Response
     */
    protected static $response;
    
    
    protected function init($router)
    {
        if (!$router instanceof \Wise\Router\Router) {
            throw new \Wise\Exception\Exception();
        }
        $this->router = $router;
    }

    /**
     * Search route, and run application
     */
    public function run($route = null)
    {
        $routeInfos = $this->router->getRouteInfos($route);
        $this->setRouteInfos($routeInfos);
        $this->executeRoute();
    }

    /**
     * Set informations from routeInfos
     *
     * @param array $routeInfos
     */
    protected function setRouteInfos($routeInfos)
    {
        self::$routeId    = md5(serialize($routeInfos));
        self::$routeName  = $routeInfos['name'];
        $this->argv       = $routeInfos['argv'];

        if (isset($routeInfos['controller'])) {
            if (strpos($routeInfos['controller'], '::') !== false) {
                list($this->controller, $this->method) = explode('::', $routeInfos['controller']);
            } else {
                $this->controller = $routeInfos['controller'];
                $this->method     = $routeInfos['method'];
            }
        }

        if (isset($routeInfos[self::PLUGIN_PRECALL])) {
            $this->plugins[self::PLUGIN_PRECALL] = $routeInfos[self::PLUGIN_PRECALL];
        } elseif ($precall = Conf::getConfig('plugin.default_precall')) {
            $this->plugins[self::PLUGIN_PRECALL] = $precall;
        } else {
            $this->plugins[self::PLUGIN_PRECALL] = array();
        }

        if (isset($routeInfos[self::PLUGIN_POSTCALL])) {
            $this->plugins[self::PLUGIN_POSTCALL] = $routeInfos[self::PLUGIN_POSTCALL];
        } elseif ($precall = Conf::getConfig('plugin.default_postcall')) {
            $this->plugins[self::PLUGIN_POSTCALL] = $precall;
        } else {
            $this->plugins[self::PLUGIN_POSTCALL] = array();
        }
    }

    /**
     * Execute route
     */
    protected function executeRoute()
    {
        $this->executePlugins(self::PLUGIN_PRECALL);
        $this->executeAction();
        $this->executePlugins(self::PLUGIN_POSTCALL);
    }

    /**
     * Execute plugins
     *
     * @param string $type
     */
    protected function executePlugins($method)
    {
        foreach ($this->plugins[$method] as $plugin) {
            if(self::$interruptRequest) {
                break;
            }

            if (empty($plugin)) {
                continue;
            }

            if (!isset($this->pluginsLoaded[$plugin])) {
                $this->pluginsLoaded[$plugin] = new $plugin();
            }

            if ($method === self::PLUGIN_PRECALL) {
                $this->pluginsLoaded[$plugin]->precall();
            } else {
                $this->pluginsLoaded[$plugin]->postCall();
            }
        }
    }

    /**
     * Execute controller
     */
    protected function executeAction()
    {
        if (!self::$interruptRequest && $this->controller !== null) {
            $controller = new $this->controller();
            self::$response = call_user_func_array(array($controller, $this->method), $this->argv);
        } else {
            self::$response = array();
        }
    }

    /**
     * Interrupt request and return response
     */
    public static function interruptRequest()
    {
        self::$interruptRequest = true;
    }

    /**
     * Retrieve route id
     *
     * @return string
     */
    public static function getRouteId()
    {
        return self::$routeId;
    }

    /**
     * Retrieve route name
     *
     * @return string
     */
    public static function getRouteName()
    {
        return self::$routeName;
    }

    /**
     * Retrieve response
     *
     * @return mixed
     */
    public static function getResponse()
    {
        return self::$response;
    }

    /**
     * Set response
     *
     * @param mixed $response
     */
    public static function setResponse($response)
    {
        self::$response = $response;
    }
}
